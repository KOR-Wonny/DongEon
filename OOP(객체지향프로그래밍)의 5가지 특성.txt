#pragma region 객체지향프로그래밍(OOP)의 5가지 특성
/*
1. 추상화(Abstraction)
 - 공통의 속성이나 기능을 묶어 이름을 붙이는 것.
 - 다른 객체들과는 구분되는 핵심적인 특징들에만 집중하여 복잡도를 관리할 수 있도록 함
 = 간략화, 개략화

2. 캡슐화(Encapsulation)
 - 외부에는 불필요하거나 내부적으로만 사용되는 부분을 감추기위해 특정 속성이나 메소드를
 - 데이터(변수)와 데이터를 다루는 방법(함수)들을 하나로 묶은 것.
 - 실제의 구현 부분을 외부로 드러나지 않도록 하는 것.
 - 데이터 외부에서 직접 접근하지 않고 공용 메소드(함수)를 통해서만 접근.

3. 정보은닉(information hiding)
 - 객체에 대한 구체적인 정보를 노출시키지 않는 것.
 - 권한이 없는 외부 객체의 접근이 불가능함.
 - 캡슐 내의 요소들에 대한 세부 구현사항들을 외부로부터 숨긴다.

4. 상속성(inheritance)
 - 상위 클래스(부모 클래스)의 모든 개념을 하위 클래스(자식 클래스)가 물려받는 것.

5. 다형성(polymorphism)
 - 동일한 외부 명령에 대해 각 객체가 서로 다른 방식으로 명령을 수행하는 것.
*/
#pragma endregion
